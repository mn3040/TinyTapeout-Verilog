--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - gameshow.v
  top_module:  "gameshow_buzzer"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Christopher Haddad, Jenna Nandlall, Matthew Nunez, Farhan Kobir"      # Your name
  title:        "Gameshow Buzzer"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Jeopardy gameshow type of buzzer."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      There are three inputs which are buzzer_inputs (6 bits), rst (1 bit), and clk (1 bit). When somebody presses their buzzer, the rest are locked out. The only
      
      way for someone else to buzz is after the the buzzers are reset (using rst). In the code we made a buzzer_lockout_reg (6 bits) to represent which button
      
      is clicked first. How the code works is it first checks if the reset button is clicked. If so, buzzer_lockout_reg is set to '000000' meaning no buzzers are
      
      currently pressed. If rst is not raised, it is checked if buzzer_lockout_reg is equal to '000000'. If so, this means anyone can click, and buzzer_lockout_reg
      
      is set to equal buzzer_inputs. The output is equal to buzzer_lockout_reg.
      

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      How to test our code is to just test out different scenarios as if it is actually being used. For instance, one can press a buzzer and try pressing another. 
      
      The user will notice that no other buzzer will work until reset is pressed. io_in[0] is set to clk. io_in[1] is set to rst. io_in[7:2] is
      
      set to buzzer_inputs. io_out[5:0] is set to buzzer_locked_reg.

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot

# The following fields are optional
  tag:          ""      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
